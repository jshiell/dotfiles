#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

# Initial machine setup; watch for entropy

set_machine_name() {
    local COMPUTER_NAME="${1:-}"

    if [[ -n "$COMPUTER_NAME" ]]; then
        sudo scutil --set ComputerName "$COMPUTER_NAME"
        sudo scutil --set HostName "$COMPUTER_NAME"
        sudo scutil --set LocalHostName "$COMPUTER_NAME"
        sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "$COMPUTER_NAME"
    fi
}

install_apps() {
    local POST_CASK_INSTALLERS="/usr/local/Caskroom/battle-net/latest/Battle.net-Setup.app"

    if ! brew --help >/dev/null 2>&1; then
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    fi

    brew install git 
    brew update
    brew bundle

    for INSTALLER in ${POST_CASK_INSTALLERS}; do
        if [[ -d "INSTALLER" ]]; then
            open $INSTALLER
        else
            echo "WARNING: cannot find installer $INSTALLER"
        fi
    done 

    brew cleanup
}

link_ssh_keys() {
    if [[ ! -d "$HOME/.ssh" && ! -h "$HOME/.ssh" ]]; then
        if [[ -d "$HOME/Library/Mobile Documents/com~apple~CloudDocs/etc/ssh" ]]; then
            ln -sf "$HOME/Library/Mobile Documents/com~apple~CloudDocs/etc/ssh" "$HOME/.ssh"
            chmod 600 "$HOME/.ssh/id_rsa"
            chmod 644 "$HOME/.ssh/authorized_keys"
        else
            echo "WARNING: no .ssh dir exists and iCloud docs aren't present; Git may fail" >&2
        fi
    fi
}

setup_shell_env() {
    if [[ -d "$HOME/dotfiles" ]]; then
        sed -i '' 's%https://github.com/jshiell/dotfiles.git%git@github.com:jshiell/dotfiles.git%g' "$HOME/dotfiles/.git/config"
    else
        git clone git@github.com:jshiell/dotfiles.git "$HOME/dotfiles"
    fi

    "$HOME/dotfiles/link"
}

setup_git() {
    mkdir -p "$HOME/.gnupg"

    if [[ "$(uname)" == 'Darwin' ]]; then
        if ! grep pinentry-program "$HOME/.gnupg/gpg-agent.conf" >/dev/null 2>&1; then
            if [[ "$(uname -p)" == 'arm' ]]; then
                echo pinentry-program /opt/homebrew/bin/pinentry-mac >> "$HOME/.gnupg/gpg-agent.conf"
            else
                echo pinentry-program /usr/local/bin/pinentry-mac >> "$HOME/.gnupg/gpg-agent.conf"
            fi
        fi

        if ! grep use-agent "$HOME/.gnupg/gpg.conf" >/dev/null 2>&1; then
            echo use-agent >> "$HOME/.gnupg/gpg.conf"
        fi
    fi

    git config --global user.name 'Jamie Shiell'
    git config --global user.email 'jamie@infernus.org'
    git config --global user.signingkey '1C25BF0EE37BF38E'

    git config --global pull.rebase true
    git config --global commit.gpgsign true

    git config --global log.follow true

    git config --global core.commentChar ";"

    git config --global core.pager "diff-so-fancy | less --tabs=4 -RFX"
    git config --global color.diff-highlight.oldNormal    "red bold"
    git config --global color.diff-highlight.oldHighlight "red bold 52"
    git config --global color.diff-highlight.newNormal    "green bold"
    git config --global color.diff-highlight.newHighlight "green bold 22"
    git config --global color.diff.meta       "yellow"
    git config --global color.diff.frag       "magenta bold"
    git config --global color.diff.commit     "yellow bold"
    git config --global color.diff.old        "red bold"
    git config --global color.diff.new        "green bold"
    git config --global color.diff.whitespace "red reverse"
}

setup_powerline_fonts() {
    [[ -d "$TMPDIR/fonts" ]] && rm -rf "$TMPDIR/fonts"
    git clone https://github.com/powerline/fonts $TMPDIR/fonts
    (
        cd "$TMPDIR/fonts"
        ./install.sh
    )
    [[ -d "$TMPDIR/fonts" ]] && rm -rf "$TMPDIR/fonts"
}

tweak_macos() {
    # Turn on firewall; disallow signed software from making external requests without confirmation; activate stealth mode
    sudo defaults write /Library/Preferences/com.apple.alf globalstate -int 1
    sudo defaults write /Library/Preferences/com.apple.alf allowsignedenabled -bool false
    sudo defaults write /Library/Preferences/com.apple.alf stealthenabled -bool true

    # Set standby delay to 30m
    sudo pmset -a standbydelay 7200

    # Disable boot SFX
    sudo nvram SystemAudioVolume=" "

    # Default save panel is expanded
    defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
    defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true

    # Default to saving to disk
    defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

    # Save screenshots as PNGs
    defaults write com.apple.screencapture type -string "png"

    # Enable HiDPI modes
    sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool true

    # Check for updates daily
    defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1

    # Ask for password 10s after screensaver starts
    defaults write com.apple.screensaver askForPassword -int 1
    defaults write com.apple.screensaver askForPasswordDelay -int 10

    # Show extended host info on login (click the time)
    sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName

    # Full keyboard access
    defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

    # Search current directory by default
    defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

    # Don't create bloody .DS_Store files on network drives
    defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

    # Default to column views in Finder
    defaults write com.apple.finder FXPreferredViewStyle -string "clmv"

    # Allow AirDrop over ethernet
    defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true

    # Die Dashboard, die
    defaults write com.apple.dashboard mcx-disabled -bool true
    defaults write com.apple.dock dashboard-in-overlay -bool true

    # Autohide the Dock
    defaults write com.apple.dock autohide-delay -float 0
    defaults write com.apple.dock autohide -bool true

    # We're not in Kansas
    defaults write NSGlobalDomain AppleLanguages -array "en-GB" "en"
    defaults write NSGlobalDomain AppleLocale -string "en_GB"
    defaults write NSGlobalDomain AppleMeasurementUnits -string "Centimeters"
    defaults write NSGlobalDomain AppleMetricUnits -bool true

    # Set the timezone; see `sudo systemsetup -listtimezones` for other values
    sudo systemsetup -settimezone "Europe/London" > /dev/null

    # Clean up launch services duplicates (Open With...)
    /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user

    # Don't open 'safe' files after downloading
    defaults write com.apple.Safari AutoOpenSafeDownloads -bool false

    # Turn on developer menu/inspector
    defaults write com.apple.Safari IncludeDevelopMenu -bool true
    defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
    defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true
    defaults write NSGlobalDomain WebKitDeveloperExtras -bool true

    # Hide Time Machine icon
    for domain in ~/Library/Preferences/ByHost/com.apple.systemuiserver.*; do
        defaults write "${domain}" dontAutoLoad -array \
            "/System/Library/CoreServices/Menu Extras/TimeMachine.menu"
    done

    # Disable local TM snapshots
    sudo tmutil disable

    # Don't ask to backup new volumes
    defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true

    ## SSDs ####################################################################

    # Disable the sudden motion sensor
    sudo pmset -a sms 0 

    # Disable hibernation
    sudo pmset -a hibernatemode 0

    # Remove the sleep image and create a read-only file in its place
    sudo rm -f /private/var/vm/sleepimage
    sudo touch /private/var/vm/sleepimage
    sudo chflags uchg /private/var/vm/sleepimage

    # Disabled Gamed
    sudo defaults write /System/Library/LaunchAgents/com.apple.gamed disabled -bool true
    launchctl unload -w /System/Library/LaunchAgents/com.apple.gamed.plist
}

install_os_extensions() {
    if [[ "$(uname -p)" == 'arm' ]]; then
        sudo softwareupdate --install-rosetta
    fi
}

main() {
    if [[ "${1:-}" == '--help' ]]; then
        echo "Usage: $0 [computer-name]"
        exit 1
    fi

    local BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    cd "$BASE_DIR"

    local MACHINE_NAME="${1:-}"
    if [[ -n "$MACHINE_NAME" ]]; then
        set_machine_name "$MACHINE_NAME"
    else
        echo "No machine name supplied; no changes will be made to the hostname"
    fi

    link_ssh_keys
    setup_shell_env
    setup_git
    install_os_extensions
    install_apps
    setup_powerline_fonts
    tweak_macos
}

main "$@"
